{"version":3,"sources":["components/TodoList/TodoList.jsx","api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","query","selected","selectChange","event","setState","target","value","todos","this","props","filteredTodos","filter","todo","title","userId","includes","completed","className","type","onChange","selcted","map","key","id","checked","readOnly","onClick","selectUser","React","Component","getAll","url","options","fetch","then","data","json","CurrentUser","user","userInfo","prevProps","name","email","phone","clearSelectedUser","App","selectedUserId","setQuery","str","alert","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c89b64fd.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\n\nexport class TodoList extends React.Component {\n  state = {\n    query: '',\n    selected: '',\n  };\n\n  selectChange = (event) => {\n    this.setState({\n      selected: event.target.value,\n    });\n  };\n\n  render() {\n    const { todos } = this.props;\n    const { query, selected } = this.state;\n    const filteredTodos = todos.filter(todo => todo.title !== '' && todo.userId !== null)\n    .filter(todo => todo.title.includes(query))\n    .filter((todo) => {\n      if (selected === 'active') {\n        return todo.completed === false;\n      }\n\n      if (selected === 'completed') {\n        return todo.completed === true;\n      }\n\n      return todo;\n    });\n    \n    return (\n      <div className=\"TodoList\">\n    <h2>Todos:</h2>\n      <input\n        type='text'\n        value={this.state.query}\n          onChange={(event) => {\n            this.setState({\n              query: event.target.value,\n            });\n        }}\n      />\n      Enter title\n      <select value={this.state.selcted} onChange={this.selectChange}>\n      <option>\n          Choose the filter\n        </option>\n        <option value='all'>\n          All\n        </option>\n        <option value='active'>\n          Active\n        </option>\n        <option value='completed'>\n          Finished\n        </option>\n      </select>\n    <div className=\"TodoList__list-container\">\n          {filteredTodos.map(todo => (\n             <ul className=\"TodoList__list\" key={todo.id}>\n                <li className={`TodoList__item \n                  ${ (todo.completed === true)\n                  ? 'TodoList__item--checked' : 'TodoList__item--unchecked'}`}\n                >\n                 <label>\n                    <input type=\"checkbox\" checked={todo.completed} readOnly />\n                    <p>{todo.title}</p>\n                  </label>\n                  <button\n                    className=\"\n                      TodoList__user-button\n                      TodoList__user-button--selected\n                      button\n                    \"\n                    type=\"button\"\n                    value={todo.userId}\n                    onClick={(todo) => this.props.selectUser(todo.target.value)}\n                  >\n                    User&nbsp;{todo.userId}\n                  </button>\n                </li>\n              </ul>\n          ))}\n    </div>\n  </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.shape(\n    {\n      id: PropTypes.number.isRequired,\n      userId: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    },\n  ).isRequired,\n  selectUser: PropTypes.func.isRequired,\n  setQuery: PropTypes.func.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nconst getAll = (url, options) => (fetch(`${BASE_URL}${url}`, options)\n  .then(data => data.json()));\n\nexport const getTodos = () => getAll('/todos');\n\nexport const getUserById = userId => getAll(`/users/${userId}`);\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getUserById } from '../../api';\n\nexport class CurrentUser extends React.Component {\n  state= {\n    user: {},\n  }\n\n  async componentDidMount() {\n    await this.userInfo(this.props.userId);\n  }\n  \n  async componentDidUpdate(prevProps){\n    if(prevProps.userId !== this.props.userId) {\n      await this.userInfo(this.props.userId);\n    }\n  }\n\n  async userInfo(id) {\n    const user = await getUserById(id);\n    this.setState({\n      user: user.data,\n    })\n  }\n\n  render() {\n    const { user } = this.state;\n\n    return(\n      <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\"><span>Selected user: {user.id}</span></h2>\n  \n      <h3 className=\"CurrentUser__name\">{user.name}</h3>\n      <p className=\"CurrentUser__email\">{user.email}</p>\n      <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n      <button\n        type='button'\n        onClick={this.props.clearSelectedUser}\n        className=\"CurrentUser__clear\"\n      >\n        Clear user\n      </button>\n    </div>\n    )\n  }\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then(todos => {\n        this.setState({\n          todos: todos.data,\n        })\n      })\n  };\n\n  setQuery = (str) => {\n    this.setState({\n      query: str,\n    });\n    this.setState(state => ({\n      todos: state.todos,\n    }));\n  }\n\n  selectUser = (id) => {\n    if(id) {\n    this.setState({\n      selectedUserId: id,\n    });\n  } else {\n    alert(`Error`);\n  }\n  };\n\n  clearSelectedUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  };\n  \n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList todos={todos} selectUser={this.selectUser} setQuery={this.setQuery} />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser userId={selectedUserId} clearSelectedUser={this.clearSelectedUser} />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}